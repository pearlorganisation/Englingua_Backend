generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  STUDENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  gender    String
  age          Int
  mobileNumber String   @unique // Make this unique if needed
  role         Role     @default(STUDENT) // Default role to STUDENT
  blogs     Blog[]   @relation("UserBlogs") // A user can write multiple blogs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  image    String
  author    User     @relation(fields: [authorId], references: [id], name: "UserBlogs") //relation field 
  authorId  String // Foreign Key or  scalar field
  topicId    String?
  topic      Topic?   @relation(fields: [topicId], references: [id], onDelete: SetNull)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id          String   @id @default(uuid())
  title       String // Business English
  description String
  categories Category[] 
  levels Level[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique// Academy, Teacher Zone
  type       CategoryType // New Enum Field (Program or Blog)
  programId  String?  // Nullable since a category can belong to a program or a blog
  program    Program? @relation(fields: [programId], references: [id], onDelete: Cascade)
  units      Unit[]
  blog       Blog[]
  topics     Topic[]      // ðŸ‘ˆ Add this reverse relation field
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum CategoryType {
  PROGRAM
  BLOG
}
model Topic {
  id          String     @id @default(uuid())
  name        String     @unique
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  blogs       Blog[]     // Related blogs
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Level {
  id         String  @id @default(uuid())
  name       String  // e.g., "Beginner", "Intermediate", "Advanced"
  programId  String
  program    Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  units      Unit[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Unit {
  id              String   @id @default(uuid()) // Unique identifier
  title           String   // e.g., "Introductions"
  discussionTopic String   // e.g., "Introduce yourself"
  listeningText   String?  // An interview with a consultant
  readingText     String?  // From small town to global leader
  languageWork    String[]
  skills          String[] 
  caseStudy       String?  // Optional case study
  levelId    String?
  level      Level?  @relation(fields: [levelId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now()) // Timestamp for record creation
  updatedAt       DateTime @updatedAt     // Timestamp for last update
}

